{"version":3,"sources":["../src/index.js"],"names":["defaultDebounce","scopeUpdates","noop","noChange","scopes","setUniqueId","args","subscribers","removeFromSet","addToSet","simpleState","arguments","newValue","callback","notify","value","done","async","computed","merge","init","subscribe","unsubscribe","dependencies","loader","sync","defaultValue","debounce","keys","allDone","x","computedState","clearTimeout","currentLock","timerId","setTimeout","callLoaderAsync","newKeys","getStateValues","oldKey","shouldUpdate","prevValue","shouldNotify","originalValue","callLoaderSync","accessors","createAccessors","batchUpdate","accessor","Object","result","functor","update","getStates","setStates","states","state","valueOnly","forceRerender","unmountRef","statesRef","values","handleChange","localStates","fallbackOrOptions","fallback","entries","stateMap","memoizedComp","results","useStates","newProps","prop","originalStates","actionMockings","mocking","unmock","data","key","updateStates","exportStates","onChange","functions","a","b","callbacks","MemoComponent","lastArgs","lastResult","f","render","error","children","props","errorObject","set","subscriber","hasChange","resetOriginalValue"],"mappings":"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","sourcesContent":["import { useEffect, useState, createElement, memo, useRef } from \"react\";\n\nconst defaultDebounce = 300;\nconst scopeUpdates = [];\nconst noop = () => {};\nconst noChange = {};\nlet scopes = 0;\nlet setUniqueId = 1;\n\n/**\n * createState(defaultValue:any)\n * createState(dependencies:IState[], functor:Function, options:any)\n * @param args\n * @return {{async: boolean, computed: boolean, subscribers: Set<any>, value: *, done: boolean}|{async: boolean, computed: boolean, subscribers: Set<any>, value: undefined, done: boolean}}\n */\nexport function createState(...args) {\n  const subscribers = {};\n\n  function unsubscribe(subscriber) {\n    removeFromSet(subscribers, subscriber);\n    return this;\n  }\n\n  function subscribe(subscriber) {\n    addToSet(subscribers, subscriber);\n    return this;\n  }\n\n  // create simple state\n  if (args.length < 2) {\n    const simpleState = Object.assign(\n      function(callback) {\n        if (!arguments.length) return simpleState.value;\n\n        let newValue;\n        // is normal object\n        if (typeof callback !== \"function\") {\n          newValue =\n            // is synthetic event object\n            callback && callback.target\n              ? typeof callback.target.checked !== \"undefined\"\n                ? callback.target.checked // checkbox\n                : callback.target.value // other inputs\n              : callback;\n        } else {\n          newValue = callback(simpleState.value);\n        }\n\n        if (newValue && newValue.then) {\n          throw new Error(\"Do not use this method for async updating\");\n        }\n        if (newValue !== simpleState.value) {\n          simpleState.value = newValue;\n          notify(subscribers);\n        }\n      },\n      {\n        value: args[0],\n        done: true,\n        subscribers,\n        async: false,\n        computed: false,\n        merge(value) {\n          simpleState({\n            ...simpleState.value,\n            value\n          });\n        },\n        init: noop,\n        subscribe,\n        unsubscribe\n      }\n    );\n    return simpleState;\n  }\n\n  // create computed state\n  const [\n    dependencies,\n    loader,\n    { sync, defaultValue = undefined, debounce = defaultDebounce } = {}\n  ] = args;\n\n  let keys = [];\n  let timerId;\n  let allDone = dependencies.every(x => {\n    x.init();\n    x.subscribe(sync ? callLoaderSync : debouncedCallLoader);\n    return x.done;\n  });\n  const computedState = {\n    dependencies,\n    value: defaultValue,\n    done: false,\n    async: !sync,\n    computed: true,\n    init: sync ? callLoaderSync : debouncedCallLoader,\n    subscribers,\n    subscribe,\n    unsubscribe\n  };\n\n  let currentLock;\n\n  function debouncedCallLoader() {\n    computedState.init = noop;\n\n    if (dependencies.some(x => !x.done)) return;\n\n    if (debounce) {\n      clearTimeout(timerId);\n      currentLock = computedState.lock = {};\n      timerId = setTimeout(callLoaderAsync, debounce);\n    } else {\n      callLoaderAsync();\n    }\n  }\n\n  function shouldUpdate(callback) {\n    const newKeys = getStateValues(dependencies, true);\n\n    if (\n      keys.length !== newKeys.length ||\n      keys.some((oldKey, index) => oldKey !== newKeys[index])\n    ) {\n      keys = newKeys;\n      callback();\n    }\n  }\n\n  function callLoaderSync() {\n    computedState.init = noop;\n    shouldUpdate(() => {\n      computedState.done = false;\n      const prevValue = computedState.value;\n      computedState.value = loader(...keys);\n      computedState.done = true;\n      if (computedState.value !== prevValue) {\n        notify(subscribers);\n      }\n    });\n  }\n\n  function callLoaderAsync() {\n    clearTimeout(timerId);\n    if (currentLock !== computedState.lock) return;\n    shouldUpdate(async () => {\n      const shouldNotify = computedState.done !== false || computedState.error;\n\n      computedState.done = false;\n      computedState.error = undefined;\n\n      const originalValue = computedState.value;\n\n      if (shouldNotify) {\n        notify(subscribers);\n      }\n\n      try {\n        const value = await loader(...keys);\n        if (currentLock !== computedState.lock) return;\n        if (value !== noChange) {\n          computedState.value = value;\n        }\n\n        computedState.done = true;\n      } catch (e) {\n        if (currentLock !== computedState.lock) return;\n        computedState.error = e;\n        computedState.done = true;\n      }\n\n      // dispatch change\n      if (computedState.value !== originalValue) {\n        notify(subscribers);\n      }\n    });\n  }\n\n  if (allDone) {\n    if (!computedState.async) {\n      callLoaderSync();\n    }\n  }\n\n  return computedState;\n}\n\n/**\n * create an action which depend on specified states\n * @param {IState[]}  states\n * @param {Function}  functor\n * @return {(Function & {getStates(): *, setStates(*): void})|*}\n */\nexport function createAction(states, functor) {\n  let accessors = createAccessors(states);\n\n  function performUpdate(subscribers = {}, batchUpdate = false) {\n    // collect all subscribers\n    for (const accessor of accessors) {\n      if (accessor.hasChange()) {\n        Object.assign(subscribers, accessor.state.subscribers);\n        accessor.resetOriginalValue();\n      }\n    }\n\n    if (!batchUpdate) {\n      notify(subscribers);\n    }\n  }\n\n  return Object.assign(\n    (...args) => {\n      try {\n        scopes++;\n        scopeUpdates.push(performUpdate);\n\n        const result = functor(...accessors, ...args);\n\n        // perform update once async method done\n        if (result && result.then) {\n          result.then(performUpdate, performUpdate);\n        }\n\n        return result;\n      } finally {\n        scopes--;\n\n        if (!scopes) {\n          // collect all subscribers need to be notified\n          const subscribers = {};\n          scopeUpdates\n            .splice(0, scopeUpdates.length)\n            .forEach(update => update(subscribers, true));\n\n          notify(subscribers);\n        }\n      }\n    },\n    {\n      getStates() {\n        return states;\n      },\n      setStates(newStates) {\n        accessors = createAccessors((states = newStates));\n      }\n    }\n  );\n}\n\nfunction getStateValues(states, valueOnly) {\n  return states.map(state => {\n    state.init();\n    return valueOnly ? state.value : state.async ? state : state.value;\n  });\n}\n\nexport function useStates(...states) {\n  const [, forceRerender] = useState();\n  const unmountRef = useRef(false);\n  const statesRef = useRef(states);\n  const values = getStateValues(states);\n\n  // get unmount status\n  useEffect(\n    () => () => {\n      unmountRef.current = true;\n    },\n    []\n  );\n\n  useEffect(() => {\n    // do not rerender if component is unmount\n    const handleChange = () => !unmountRef.current && forceRerender({});\n    const localStates = statesRef.current;\n\n    localStates.forEach(state => {\n      state.subscribe(handleChange);\n    });\n\n    return () => {\n      localStates.forEach(state => state.unsubscribe(handleChange));\n    };\n  }, [forceRerender]);\n\n  return values;\n}\n\n/**\n *\n * @param stateMap\n * @param fallbackOrOptions\n * @return {function(*=): Function}\n */\nexport function withAsyncStates(stateMap, fallbackOrOptions) {\n  if (\n    typeof fallbackOrOptions === \"function\" ||\n    typeof fallbackOrOptions === \"boolean\" ||\n    // support styled component\n    (fallbackOrOptions && fallbackOrOptions.styledComponentId)\n  ) {\n    fallbackOrOptions = { fallback: fallbackOrOptions };\n  }\n\n  const { fallback } = fallbackOrOptions;\n\n  const entries = Object.entries(stateMap || {});\n  const states = entries.map(x => x[1]);\n\n  if (states.some(state => !state.async)) {\n    throw new Error(\"Expect async state but got sync state\");\n  }\n\n  return comp => {\n    const memoizedComp = memo(comp);\n    return props => {\n      const results = useStates(...states);\n      const newProps = {};\n\n      let allDone = true;\n\n      results.forEach((result, index) => {\n        const prop = entries[index][0];\n        newProps[prop] = states[index];\n        if (!result.done || result.error) {\n          allDone = false;\n        } else {\n          newProps[prop + \"Done\"] = true;\n        }\n      });\n\n      if (!allDone && fallback !== false) {\n        return fallback ? createElement(fallback, props) : null;\n      }\n\n      Object.assign(newProps, props);\n\n      return createElement(memoizedComp, newProps);\n    };\n  };\n}\n\n/**\n * use this method for testing only\n * sample:\n * mock([\n *  [Action1, [State1, State2]],\n *  [Action2, [false, State2]] // we leave first state, no overwrite\n * ],async () => {\n *  do something, functor can be async function\n * )\n * @param actionMockings\n * @param functor\n */\nexport function mock(actionMockings, functor) {\n  const originalStates = new WeakMap();\n  let done = false;\n  actionMockings.forEach(mocking => {\n    const states = mocking[0].getStates();\n    originalStates.set(\n      mocking[0],\n      // using original state if input state is falsy\n      mocking[1].map((state, index) => state || states[index])\n    );\n  });\n\n  function unmock() {\n    actionMockings.forEach(mocking =>\n      mocking[0].setStates(originalStates.get(mocking[0]))\n    );\n  }\n  try {\n    const result = functor();\n    if (result && result.then) {\n      result.then(unmock, unmock);\n    } else {\n      done = true;\n    }\n    return result;\n  } finally {\n    if (done) {\n      unmock();\n    }\n  }\n}\n\n/**\n * update multiple states from specific data\n * @param stateMap\n * @param data\n */\nexport function updateStates(stateMap, data = {}) {\n  Object.keys(stateMap).forEach(key => {\n    // do not overwrite state value if the key is not present in data\n    if (!(key in data)) return;\n    const state = stateMap[key];\n    if (state.computed) {\n      throw new Error(\"Cannot update computed state\");\n    }\n    state(data[key]);\n  });\n}\n\n/**\n * export multiple states to json object\n * @param stateMap\n */\nexport function exportStates(stateMap) {\n  const values = {};\n\n  Object.keys(stateMap).forEach(key => {\n    values[key] = stateMap[key].value;\n  });\n\n  return values;\n}\n\n/**\n * perfom loading/saving multiple states automatically\n * @param states\n * @param data\n * @param onChange\n * @param debounce\n */\nexport function persist(states, data, onChange, debounce = defaultDebounce) {\n  updateStates(states, data);\n  let timerId;\n  function debouncedHandleChange() {\n    if (debounce) {\n      clearTimeout(timerId);\n      timerId = setTimeout(handleChange, debounce);\n    } else {\n      handleChange();\n    }\n  }\n\n  function handleChange() {\n    clearTimeout(timerId);\n    const values = exportStates(states);\n    onChange && onChange(values);\n  }\n\n  Object.values(states).forEach(state =>\n    state.subscribe(debouncedHandleChange)\n  );\n}\n\nexport function compose(...functions) {\n  if (functions.length === 0) {\n    return arg => arg;\n  }\n\n  if (functions.length === 1) {\n    return functions[0];\n  }\n\n  return functions.reduce((a, b) => (...args) => a(b(...args)));\n}\n\nexport function hoc(...callbacks) {\n  return callbacks.reduce(\n    (nextHoc, callback) => Component => {\n      const MemoComponent = memo(Component);\n\n      return props => {\n        // callback requires props and Comp, it must return React element\n        if (callback.length > 1) {\n          return callback(props, MemoComponent);\n        }\n        let newProps = callback(props);\n        if (newProps === false) return null;\n        if (!newProps) {\n          newProps = props;\n        }\n\n        return createElement(MemoComponent, newProps);\n      };\n    },\n    Component => Component\n  );\n}\n\nexport function memoize(f) {\n  let lastResult;\n  let lastArgs;\n\n  return function(...args) {\n    // call f on first time or args changed\n    if (!lastArgs || lastArgs.some((value, index) => value !== args[index])) {\n      lastArgs = args;\n      lastResult = f(...lastArgs);\n    }\n    return lastResult;\n  };\n}\n\nexport function AsyncRender({\n  render,\n  error,\n  children,\n  state,\n  states,\n  prop = \"data\",\n  ...props\n}) {\n  const results = useStates(...(states || [state]));\n  const allDone = results.every(result => result.done);\n\n  if (!allDone) {\n    return children;\n  }\n\n  const errorObject = state\n    ? state.error\n    : states.filter(x => x.error).map(x => x.error)[0];\n\n  if (errorObject) {\n    if (error) {\n      return createElement(error, errorObject);\n    }\n    return children;\n  }\n\n  const data = state ? results[0].value : results.map(result => result.value);\n\n  if (render) {\n    return createElement(\n      render,\n      prop\n        ? {\n            [prop]: data,\n            ...props\n          }\n        : {\n            ...data,\n            ...props\n          }\n    );\n  }\n\n  return data;\n}\n\nfunction addToSet(set, functor) {\n  if (!functor.__id__) {\n    functor.__id__ = setUniqueId++;\n  }\n\n  if (functor.__id__ in set) {\n    return;\n  }\n\n  set[functor.__id__] = functor;\n}\n\nfunction removeFromSet(set, functor) {\n  if (functor.__id__) {\n    delete set[functor.__id__];\n  }\n}\n\nfunction notify(subscribers) {\n  for (const subscriber of Object.values(subscribers)) {\n    subscriber();\n  }\n}\n\nfunction createAccessors(states) {\n  return states.map(state => {\n    let originalValue = state.value;\n    return Object.assign(\n      function(value) {\n        if (arguments.length) {\n          if (state.computed) {\n            throw new Error(\"Cannot update computed state\");\n          }\n          return (state.value = value);\n        }\n\n        return state.value;\n      },\n      {\n        state,\n        hasChange() {\n          return originalValue !== state.value;\n        },\n        resetOriginalValue() {\n          originalValue = state.value;\n        }\n      }\n    );\n  });\n}\n"],"file":"index.js"}